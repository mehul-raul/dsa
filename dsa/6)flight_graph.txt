#include<bits/stdc++.h> // Include necessary libraries
using namespace std;
#define MAX 100 // Define maximum number of vertices in the graph

struct Graph // Structure to represent a graph
{
    int data[MAX][MAX]; // Adjacency matrix to store edge weights
    int vertices; // Number of vertices in the graph

    map<pair<string,string>, int> hash; // Map to store fuel requirements between cities

    void read() // Method to read graph data from user
    {
        for (int i = 0; i < MAX; i++) // Initialize adjacency matrix
        {
            for (int j = 0; j < MAX; j++)
            {
                data[i][j] = 0;
            }
        }
        cout << "Enter the number of cities-\n";
        cin >> vertices; // Input number of cities
        string cities[vertices]; // Array to store city names
        for (int i = 0; i < vertices; i++) // Input city names
        {
            string city;
            cout << "Enter the name of the city-\n";
            cin >> cities[i];
        }
        int edges;
        cout << "Enter the number of edges-\n";
        cin >> edges; // Input number of edges

        for (int i = 0; i < vertices; i++) // Input fuel requirements between cities
        {
            int fuel;
            for (int j = 0; j < vertices; j++)
            {
                if (i != j)
                {
                    cout << "Enter the amount of fuel required for the journey from city " + cities[i] + " to " << cities[j] << endl; 
                    cin >> fuel;
                    data[i][j] = fuel; // Update adjacency matrix
                    pair<string,string> p = make_pair(cities[i], cities[j]);
                    hash[p] = fuel; // Update hash map
                }
                else
                {
                    pair<string,string> p = make_pair(cities[i], cities[j]);
                    hash[p] = 0; // No fuel required for journey within the same city
                }
            }
        }
    }

    void display() // Method to display the adjacency matrix
    {
        for (int i = 0; i < vertices; i++)
        {
            for (int j = 0; j < vertices; j++)
            {
                cout << data[i][j] << " "; // Display edge weights
            }
            cout << endl;
        }
    }

    void check_path(pair<string,string> p) // Method to check fuel requirement between two cities
    {
        if (hash[p] != 0)
        {
            cout << "The fuel required from city " << p.first << " to " << p.second << " is " << hash[p] << endl;
        }
        else
        {
            cout << "There is no path from city " << p.first << " to " << p.second << endl;
        }
    }

    void is_connected(int source, vector<bool> &visited) // Method to check if the graph is connected
    {
        visited[source] = true; // Mark the current vertex as visited
        for (int i = 0; i < vertices; i++)
        {
            if (data[source][i] != 0 and visited[i] != true) // Check adjacent vertices
            {
                is_connected(i, visited); // Recursive call for unvisited vertices
            }
        }
    }
};

int main() // Main function
{
    Graph g; // Create graph object
    g.read(); // Read graph data
    g.display(); // Display adjacency matrix
    string source, destination;
    cout << "Enter the source city-\n";
    cin >> source; // Input source city
    cout << "Enter the destination city-\n";
    cin >> destination; // Input destination city
    pair<string,string> p = make_pair(source, destination); // Create pair for source and destination cities
    g.check_path(p); // Check fuel requirement between source and destination cities
    vector<bool> visited(MAX, false); // Initialize visited array
    g.is_connected(0, visited); // Check if the graph is connected
    bool flag = true;
    for (int i = 0; i < g.vertices; i++) // Check if all vertices are visited
    {
        if (visited[i] == false)
        {
            flag = false;
            break;
        }
    }
    if (flag == true) // If all vertices are visited, graph is connected
    {
        cout << "The graph is connected!" << endl;
    }
    else // Otherwise, graph is not connected
    {
        cout << "The graph is not connected!" << endl;
    }
    return 0; // Return statement for main function
}
